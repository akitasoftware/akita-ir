// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1-devel
// 	protoc        v3.15.8
// source: sequence.proto

package api_spec

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NamedDataRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key     string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	DataRef *DataRef `protobuf:"bytes,2,opt,name=data_ref,json=dataRef,proto3" json:"data_ref,omitempty"`
}

func (x *NamedDataRef) Reset() {
	*x = NamedDataRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sequence_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NamedDataRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamedDataRef) ProtoMessage() {}

func (x *NamedDataRef) ProtoReflect() protoreflect.Message {
	mi := &file_sequence_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamedDataRef.ProtoReflect.Descriptor instead.
func (*NamedDataRef) Descriptor() ([]byte, []int) {
	return file_sequence_proto_rawDescGZIP(), []int{0}
}

func (x *NamedDataRef) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *NamedDataRef) GetDataRef() *DataRef {
	if x != nil {
		return x.DataRef
	}
	return nil
}

type IndexedDataRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index   int32    `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	DataRef *DataRef `protobuf:"bytes,2,opt,name=data_ref,json=dataRef,proto3" json:"data_ref,omitempty"`
}

func (x *IndexedDataRef) Reset() {
	*x = IndexedDataRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sequence_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexedDataRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexedDataRef) ProtoMessage() {}

func (x *IndexedDataRef) ProtoReflect() protoreflect.Message {
	mi := &file_sequence_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexedDataRef.ProtoReflect.Descriptor instead.
func (*IndexedDataRef) Descriptor() ([]byte, []int) {
	return file_sequence_proto_rawDescGZIP(), []int{1}
}

func (x *IndexedDataRef) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *IndexedDataRef) GetDataRef() *DataRef {
	if x != nil {
		return x.DataRef
	}
	return nil
}

type PrimitiveRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//	*PrimitiveRef_BoolType
	//	*PrimitiveRef_BytesType
	//	*PrimitiveRef_StringType
	//	*PrimitiveRef_Int32Type
	//	*PrimitiveRef_Int64Type
	//	*PrimitiveRef_Uint32Type
	//	*PrimitiveRef_Uint64Type
	//	*PrimitiveRef_DoubleType
	//	*PrimitiveRef_FloatType
	Type isPrimitiveRef_Type `protobuf_oneof:"type"`
}

func (x *PrimitiveRef) Reset() {
	*x = PrimitiveRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sequence_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrimitiveRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrimitiveRef) ProtoMessage() {}

func (x *PrimitiveRef) ProtoReflect() protoreflect.Message {
	mi := &file_sequence_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrimitiveRef.ProtoReflect.Descriptor instead.
func (*PrimitiveRef) Descriptor() ([]byte, []int) {
	return file_sequence_proto_rawDescGZIP(), []int{2}
}

func (m *PrimitiveRef) GetType() isPrimitiveRef_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *PrimitiveRef) GetBoolType() *BoolType {
	if x, ok := x.GetType().(*PrimitiveRef_BoolType); ok {
		return x.BoolType
	}
	return nil
}

func (x *PrimitiveRef) GetBytesType() *BytesType {
	if x, ok := x.GetType().(*PrimitiveRef_BytesType); ok {
		return x.BytesType
	}
	return nil
}

func (x *PrimitiveRef) GetStringType() *StringType {
	if x, ok := x.GetType().(*PrimitiveRef_StringType); ok {
		return x.StringType
	}
	return nil
}

func (x *PrimitiveRef) GetInt32Type() *Int32Type {
	if x, ok := x.GetType().(*PrimitiveRef_Int32Type); ok {
		return x.Int32Type
	}
	return nil
}

func (x *PrimitiveRef) GetInt64Type() *Int64Type {
	if x, ok := x.GetType().(*PrimitiveRef_Int64Type); ok {
		return x.Int64Type
	}
	return nil
}

func (x *PrimitiveRef) GetUint32Type() *Uint32Type {
	if x, ok := x.GetType().(*PrimitiveRef_Uint32Type); ok {
		return x.Uint32Type
	}
	return nil
}

func (x *PrimitiveRef) GetUint64Type() *Uint64Type {
	if x, ok := x.GetType().(*PrimitiveRef_Uint64Type); ok {
		return x.Uint64Type
	}
	return nil
}

func (x *PrimitiveRef) GetDoubleType() *DoubleType {
	if x, ok := x.GetType().(*PrimitiveRef_DoubleType); ok {
		return x.DoubleType
	}
	return nil
}

func (x *PrimitiveRef) GetFloatType() *FloatType {
	if x, ok := x.GetType().(*PrimitiveRef_FloatType); ok {
		return x.FloatType
	}
	return nil
}

type isPrimitiveRef_Type interface {
	isPrimitiveRef_Type()
}

type PrimitiveRef_BoolType struct {
	BoolType *BoolType `protobuf:"bytes,1,opt,name=bool_type,json=boolType,proto3,oneof"`
}

type PrimitiveRef_BytesType struct {
	BytesType *BytesType `protobuf:"bytes,2,opt,name=bytes_type,json=bytesType,proto3,oneof"`
}

type PrimitiveRef_StringType struct {
	StringType *StringType `protobuf:"bytes,3,opt,name=string_type,json=stringType,proto3,oneof"`
}

type PrimitiveRef_Int32Type struct {
	Int32Type *Int32Type `protobuf:"bytes,4,opt,name=int32_type,json=int32Type,proto3,oneof"`
}

type PrimitiveRef_Int64Type struct {
	Int64Type *Int64Type `protobuf:"bytes,5,opt,name=int64_type,json=int64Type,proto3,oneof"`
}

type PrimitiveRef_Uint32Type struct {
	Uint32Type *Uint32Type `protobuf:"bytes,6,opt,name=uint32_type,json=uint32Type,proto3,oneof"`
}

type PrimitiveRef_Uint64Type struct {
	Uint64Type *Uint64Type `protobuf:"bytes,7,opt,name=uint64_type,json=uint64Type,proto3,oneof"`
}

type PrimitiveRef_DoubleType struct {
	DoubleType *DoubleType `protobuf:"bytes,8,opt,name=double_type,json=doubleType,proto3,oneof"`
}

type PrimitiveRef_FloatType struct {
	FloatType *FloatType `protobuf:"bytes,9,opt,name=float_type,json=floatType,proto3,oneof"`
}

func (*PrimitiveRef_BoolType) isPrimitiveRef_Type() {}

func (*PrimitiveRef_BytesType) isPrimitiveRef_Type() {}

func (*PrimitiveRef_StringType) isPrimitiveRef_Type() {}

func (*PrimitiveRef_Int32Type) isPrimitiveRef_Type() {}

func (*PrimitiveRef_Int64Type) isPrimitiveRef_Type() {}

func (*PrimitiveRef_Uint32Type) isPrimitiveRef_Type() {}

func (*PrimitiveRef_Uint64Type) isPrimitiveRef_Type() {}

func (*PrimitiveRef_DoubleType) isPrimitiveRef_Type() {}

func (*PrimitiveRef_FloatType) isPrimitiveRef_Type() {}

type StructRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Ref:
	//	*StructRef_FullStruct
	//	*StructRef_FieldRef
	Ref isStructRef_Ref `protobuf_oneof:"ref"`
}

func (x *StructRef) Reset() {
	*x = StructRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sequence_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StructRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StructRef) ProtoMessage() {}

func (x *StructRef) ProtoReflect() protoreflect.Message {
	mi := &file_sequence_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StructRef.ProtoReflect.Descriptor instead.
func (*StructRef) Descriptor() ([]byte, []int) {
	return file_sequence_proto_rawDescGZIP(), []int{3}
}

func (m *StructRef) GetRef() isStructRef_Ref {
	if m != nil {
		return m.Ref
	}
	return nil
}

func (x *StructRef) GetFullStruct() *StructRef_FullStructRef {
	if x, ok := x.GetRef().(*StructRef_FullStruct); ok {
		return x.FullStruct
	}
	return nil
}

func (x *StructRef) GetFieldRef() *NamedDataRef {
	if x, ok := x.GetRef().(*StructRef_FieldRef); ok {
		return x.FieldRef
	}
	return nil
}

type isStructRef_Ref interface {
	isStructRef_Ref()
}

type StructRef_FullStruct struct {
	FullStruct *StructRef_FullStructRef `protobuf:"bytes,1,opt,name=full_struct,json=fullStruct,proto3,oneof"`
}

type StructRef_FieldRef struct {
	// Reference to a particular field.
	FieldRef *NamedDataRef `protobuf:"bytes,2,opt,name=field_ref,json=fieldRef,proto3,oneof"`
}

func (*StructRef_FullStruct) isStructRef_Ref() {}

func (*StructRef_FieldRef) isStructRef_Ref() {}

type ListRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Ref:
	//	*ListRef_FullList
	//	*ListRef_ElemRef
	Ref isListRef_Ref `protobuf_oneof:"ref"`
}

func (x *ListRef) Reset() {
	*x = ListRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sequence_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRef) ProtoMessage() {}

func (x *ListRef) ProtoReflect() protoreflect.Message {
	mi := &file_sequence_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRef.ProtoReflect.Descriptor instead.
func (*ListRef) Descriptor() ([]byte, []int) {
	return file_sequence_proto_rawDescGZIP(), []int{4}
}

func (m *ListRef) GetRef() isListRef_Ref {
	if m != nil {
		return m.Ref
	}
	return nil
}

func (x *ListRef) GetFullList() *ListRef_FullListRef {
	if x, ok := x.GetRef().(*ListRef_FullList); ok {
		return x.FullList
	}
	return nil
}

func (x *ListRef) GetElemRef() *IndexedDataRef {
	if x, ok := x.GetRef().(*ListRef_ElemRef); ok {
		return x.ElemRef
	}
	return nil
}

type isListRef_Ref interface {
	isListRef_Ref()
}

type ListRef_FullList struct {
	FullList *ListRef_FullListRef `protobuf:"bytes,1,opt,name=full_list,json=fullList,proto3,oneof"`
}

type ListRef_ElemRef struct {
	// Reference to specific element by index.
	ElemRef *IndexedDataRef `protobuf:"bytes,2,opt,name=elem_ref,json=elemRef,proto3,oneof"`
}

func (*ListRef_FullList) isListRef_Ref() {}

func (*ListRef_ElemRef) isListRef_Ref() {}

// DataRef is a reference or "pointer" to a particular Data object within a
// parent Data object.
type DataRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ValueRef:
	//	*DataRef_PrimitiveRef
	//	*DataRef_StructRef
	//	*DataRef_ListRef
	ValueRef isDataRef_ValueRef `protobuf_oneof:"value_ref"`
}

func (x *DataRef) Reset() {
	*x = DataRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sequence_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataRef) ProtoMessage() {}

func (x *DataRef) ProtoReflect() protoreflect.Message {
	mi := &file_sequence_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataRef.ProtoReflect.Descriptor instead.
func (*DataRef) Descriptor() ([]byte, []int) {
	return file_sequence_proto_rawDescGZIP(), []int{5}
}

func (m *DataRef) GetValueRef() isDataRef_ValueRef {
	if m != nil {
		return m.ValueRef
	}
	return nil
}

func (x *DataRef) GetPrimitiveRef() *PrimitiveRef {
	if x, ok := x.GetValueRef().(*DataRef_PrimitiveRef); ok {
		return x.PrimitiveRef
	}
	return nil
}

func (x *DataRef) GetStructRef() *StructRef {
	if x, ok := x.GetValueRef().(*DataRef_StructRef); ok {
		return x.StructRef
	}
	return nil
}

func (x *DataRef) GetListRef() *ListRef {
	if x, ok := x.GetValueRef().(*DataRef_ListRef); ok {
		return x.ListRef
	}
	return nil
}

type isDataRef_ValueRef interface {
	isDataRef_ValueRef()
}

type DataRef_PrimitiveRef struct {
	PrimitiveRef *PrimitiveRef `protobuf:"bytes,1,opt,name=primitive_ref,json=primitiveRef,proto3,oneof"`
}

type DataRef_StructRef struct {
	StructRef *StructRef `protobuf:"bytes,2,opt,name=struct_ref,json=structRef,proto3,oneof"`
}

type DataRef_ListRef struct {
	ListRef *ListRef `protobuf:"bytes,3,opt,name=list_ref,json=listRef,proto3,oneof"`
}

func (*DataRef_PrimitiveRef) isDataRef_ValueRef() {}

func (*DataRef_StructRef) isDataRef_ValueRef() {}

func (*DataRef_ListRef) isDataRef_ValueRef() {}

// MethodDataRef describes a reference to a value within a Method in the
// sequence.
type MethodDataRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Index of the method in the sequence.
	MethodIndex int32 `protobuf:"varint,1,opt,name=method_index,json=methodIndex,proto3" json:"method_index,omitempty"`
	// Types that are assignable to Ref:
	//	*MethodDataRef_ArgRef
	//	*MethodDataRef_ResponseRef
	Ref isMethodDataRef_Ref `protobuf_oneof:"ref"`
	// This should come from the Data protobuf making the reference, not the Data
	// protobuf being referenced. Because of this, it is easier for the sequence
	// generator to add this to MethodDataRef, instead of PrimitiveRef, even
	// though this should only exist for references to primitive data types.
	AkitaAnnotations *AkitaAnnotations `protobuf:"bytes,11,opt,name=akita_annotations,json=akitaAnnotations,proto3" json:"akita_annotations,omitempty"`
}

func (x *MethodDataRef) Reset() {
	*x = MethodDataRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sequence_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MethodDataRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MethodDataRef) ProtoMessage() {}

func (x *MethodDataRef) ProtoReflect() protoreflect.Message {
	mi := &file_sequence_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MethodDataRef.ProtoReflect.Descriptor instead.
func (*MethodDataRef) Descriptor() ([]byte, []int) {
	return file_sequence_proto_rawDescGZIP(), []int{6}
}

func (x *MethodDataRef) GetMethodIndex() int32 {
	if x != nil {
		return x.MethodIndex
	}
	return 0
}

func (m *MethodDataRef) GetRef() isMethodDataRef_Ref {
	if m != nil {
		return m.Ref
	}
	return nil
}

func (x *MethodDataRef) GetArgRef() *NamedDataRef {
	if x, ok := x.GetRef().(*MethodDataRef_ArgRef); ok {
		return x.ArgRef
	}
	return nil
}

func (x *MethodDataRef) GetResponseRef() *NamedDataRef {
	if x, ok := x.GetRef().(*MethodDataRef_ResponseRef); ok {
		return x.ResponseRef
	}
	return nil
}

func (x *MethodDataRef) GetAkitaAnnotations() *AkitaAnnotations {
	if x != nil {
		return x.AkitaAnnotations
	}
	return nil
}

type isMethodDataRef_Ref interface {
	isMethodDataRef_Ref()
}

type MethodDataRef_ArgRef struct {
	ArgRef *NamedDataRef `protobuf:"bytes,2,opt,name=arg_ref,json=argRef,proto3,oneof"`
}

type MethodDataRef_ResponseRef struct {
	ResponseRef *NamedDataRef `protobuf:"bytes,3,opt,name=response_ref,json=responseRef,proto3,oneof"`
}

func (*MethodDataRef_ArgRef) isMethodDataRef_Ref() {}

func (*MethodDataRef_ResponseRef) isMethodDataRef_Ref() {}

type StructTemplate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FieldTemplates map[string]*DataTemplate `protobuf:"bytes,1,rep,name=field_templates,json=fieldTemplates,proto3" json:"field_templates,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *StructTemplate) Reset() {
	*x = StructTemplate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sequence_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StructTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StructTemplate) ProtoMessage() {}

func (x *StructTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_sequence_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StructTemplate.ProtoReflect.Descriptor instead.
func (*StructTemplate) Descriptor() ([]byte, []int) {
	return file_sequence_proto_rawDescGZIP(), []int{7}
}

func (x *StructTemplate) GetFieldTemplates() map[string]*DataTemplate {
	if x != nil {
		return x.FieldTemplates
	}
	return nil
}

type ListTemplate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ElemTemplates []*DataTemplate `protobuf:"bytes,1,rep,name=elem_templates,json=elemTemplates,proto3" json:"elem_templates,omitempty"`
}

func (x *ListTemplate) Reset() {
	*x = ListTemplate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sequence_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTemplate) ProtoMessage() {}

func (x *ListTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_sequence_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTemplate.ProtoReflect.Descriptor instead.
func (*ListTemplate) Descriptor() ([]byte, []int) {
	return file_sequence_proto_rawDescGZIP(), []int{8}
}

func (x *ListTemplate) GetElemTemplates() []*DataTemplate {
	if x != nil {
		return x.ElemTemplates
	}
	return nil
}

type OptionalTemplate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ValueTemplate *DataTemplate `protobuf:"bytes,1,opt,name=value_template,json=valueTemplate,proto3" json:"value_template,omitempty"`
}

func (x *OptionalTemplate) Reset() {
	*x = OptionalTemplate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sequence_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OptionalTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptionalTemplate) ProtoMessage() {}

func (x *OptionalTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_sequence_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptionalTemplate.ProtoReflect.Descriptor instead.
func (*OptionalTemplate) Descriptor() ([]byte, []int) {
	return file_sequence_proto_rawDescGZIP(), []int{9}
}

func (x *OptionalTemplate) GetValueTemplate() *DataTemplate {
	if x != nil {
		return x.ValueTemplate
	}
	return nil
}

// DataTemplate describes how to construct a Data object. It recursively encodes
// the structure of the desired Data object while embedding values or references
// to values that is needed to fill out the Data object.
type DataTemplate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ValueTemplate:
	//	*DataTemplate_StructTemplate
	//	*DataTemplate_ListTemplate
	//	*DataTemplate_Value
	//	*DataTemplate_Ref
	//	*DataTemplate_OptionalTemplate
	ValueTemplate isDataTemplate_ValueTemplate `protobuf_oneof:"value_template"`
	Meta          *DataMeta                    `protobuf:"bytes,6,opt,name=meta,proto3" json:"meta,omitempty"`
}

func (x *DataTemplate) Reset() {
	*x = DataTemplate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sequence_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataTemplate) ProtoMessage() {}

func (x *DataTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_sequence_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataTemplate.ProtoReflect.Descriptor instead.
func (*DataTemplate) Descriptor() ([]byte, []int) {
	return file_sequence_proto_rawDescGZIP(), []int{10}
}

func (m *DataTemplate) GetValueTemplate() isDataTemplate_ValueTemplate {
	if m != nil {
		return m.ValueTemplate
	}
	return nil
}

func (x *DataTemplate) GetStructTemplate() *StructTemplate {
	if x, ok := x.GetValueTemplate().(*DataTemplate_StructTemplate); ok {
		return x.StructTemplate
	}
	return nil
}

func (x *DataTemplate) GetListTemplate() *ListTemplate {
	if x, ok := x.GetValueTemplate().(*DataTemplate_ListTemplate); ok {
		return x.ListTemplate
	}
	return nil
}

func (x *DataTemplate) GetValue() *Data {
	if x, ok := x.GetValueTemplate().(*DataTemplate_Value); ok {
		return x.Value
	}
	return nil
}

func (x *DataTemplate) GetRef() *MethodDataRef {
	if x, ok := x.GetValueTemplate().(*DataTemplate_Ref); ok {
		return x.Ref
	}
	return nil
}

func (x *DataTemplate) GetOptionalTemplate() *OptionalTemplate {
	if x, ok := x.GetValueTemplate().(*DataTemplate_OptionalTemplate); ok {
		return x.OptionalTemplate
	}
	return nil
}

func (x *DataTemplate) GetMeta() *DataMeta {
	if x != nil {
		return x.Meta
	}
	return nil
}

type isDataTemplate_ValueTemplate interface {
	isDataTemplate_ValueTemplate()
}

type DataTemplate_StructTemplate struct {
	StructTemplate *StructTemplate `protobuf:"bytes,1,opt,name=struct_template,json=structTemplate,proto3,oneof"`
}

type DataTemplate_ListTemplate struct {
	ListTemplate *ListTemplate `protobuf:"bytes,2,opt,name=list_template,json=listTemplate,proto3,oneof"`
}

type DataTemplate_Value struct {
	Value *Data `protobuf:"bytes,3,opt,name=value,proto3,oneof"`
}

type DataTemplate_Ref struct {
	Ref *MethodDataRef `protobuf:"bytes,4,opt,name=ref,proto3,oneof"`
}

type DataTemplate_OptionalTemplate struct {
	OptionalTemplate *OptionalTemplate `protobuf:"bytes,5,opt,name=optional_template,json=optionalTemplate,proto3,oneof"`
}

func (*DataTemplate_StructTemplate) isDataTemplate_ValueTemplate() {}

func (*DataTemplate_ListTemplate) isDataTemplate_ValueTemplate() {}

func (*DataTemplate_Value) isDataTemplate_ValueTemplate() {}

func (*DataTemplate_Ref) isDataTemplate_ValueTemplate() {}

func (*DataTemplate_OptionalTemplate) isDataTemplate_ValueTemplate() {}

// MethodTemplate describes how a method should be invoked.
type MethodTemplate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier for this MethodTemplate.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// ID of the Method that this template represents.
	MethodId *MethodID `protobuf:"bytes,2,opt,name=method_id,json=methodId,proto3" json:"method_id,omitempty"`
	// Templates for the arguments.
	ArgTemplates map[string]*DataTemplate `protobuf:"bytes,3,rep,name=arg_templates,json=argTemplates,proto3" json:"arg_templates,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Describes the types expected in the method's response. This is needed in
	// order to parse actual API call response back into the generic format and
	// lives here mostly for plumbing reasons.
	Responses map[string]*Data `protobuf:"bytes,4,rep,name=responses,proto3" json:"responses,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Meta      *MethodMeta      `protobuf:"bytes,5,opt,name=meta,proto3" json:"meta,omitempty"`
}

func (x *MethodTemplate) Reset() {
	*x = MethodTemplate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sequence_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MethodTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MethodTemplate) ProtoMessage() {}

func (x *MethodTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_sequence_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MethodTemplate.ProtoReflect.Descriptor instead.
func (*MethodTemplate) Descriptor() ([]byte, []int) {
	return file_sequence_proto_rawDescGZIP(), []int{11}
}

func (x *MethodTemplate) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MethodTemplate) GetMethodId() *MethodID {
	if x != nil {
		return x.MethodId
	}
	return nil
}

func (x *MethodTemplate) GetArgTemplates() map[string]*DataTemplate {
	if x != nil {
		return x.ArgTemplates
	}
	return nil
}

func (x *MethodTemplate) GetResponses() map[string]*Data {
	if x != nil {
		return x.Responses
	}
	return nil
}

func (x *MethodTemplate) GetMeta() *MethodMeta {
	if x != nil {
		return x.Meta
	}
	return nil
}

type Sequence struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Sequence ID is computed as sha256("".join(t.id for t in method_templates)).
	// By generating sequence ID deterministically, we can easily compute the
	// sequnce ID of the prefix of a given sequence.
	Id              string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	MethodTemplates []*MethodTemplate `protobuf:"bytes,2,rep,name=method_templates,json=methodTemplates,proto3" json:"method_templates,omitempty"`
}

func (x *Sequence) Reset() {
	*x = Sequence{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sequence_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sequence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sequence) ProtoMessage() {}

func (x *Sequence) ProtoReflect() protoreflect.Message {
	mi := &file_sequence_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sequence.ProtoReflect.Descriptor instead.
func (*Sequence) Descriptor() ([]byte, []int) {
	return file_sequence_proto_rawDescGZIP(), []int{12}
}

func (x *Sequence) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Sequence) GetMethodTemplates() []*MethodTemplate {
	if x != nil {
		return x.MethodTemplates
	}
	return nil
}

type SequenceRun struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Seq *Sequence `protobuf:"bytes,1,opt,name=seq,proto3" json:"seq,omitempty"`
	// Indicates that this is the ith attempt to rerun the sequence. 0 means this
	// is not a rerun (i.e. the initial run).
	RerunAttempt int32 `protobuf:"varint,2,opt,name=rerun_attempt,json=rerunAttempt,proto3" json:"rerun_attempt,omitempty"`
}

func (x *SequenceRun) Reset() {
	*x = SequenceRun{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sequence_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SequenceRun) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SequenceRun) ProtoMessage() {}

func (x *SequenceRun) ProtoReflect() protoreflect.Message {
	mi := &file_sequence_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SequenceRun.ProtoReflect.Descriptor instead.
func (*SequenceRun) Descriptor() ([]byte, []int) {
	return file_sequence_proto_rawDescGZIP(), []int{13}
}

func (x *SequenceRun) GetSeq() *Sequence {
	if x != nil {
		return x.Seq
	}
	return nil
}

func (x *SequenceRun) GetRerunAttempt() int32 {
	if x != nil {
		return x.RerunAttempt
	}
	return 0
}

// Reference the entire struct.
type StructRef_FullStructRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StructRef_FullStructRef) Reset() {
	*x = StructRef_FullStructRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sequence_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StructRef_FullStructRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StructRef_FullStructRef) ProtoMessage() {}

func (x *StructRef_FullStructRef) ProtoReflect() protoreflect.Message {
	mi := &file_sequence_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StructRef_FullStructRef.ProtoReflect.Descriptor instead.
func (*StructRef_FullStructRef) Descriptor() ([]byte, []int) {
	return file_sequence_proto_rawDescGZIP(), []int{3, 0}
}

// Reference the entire list.
type ListRef_FullListRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListRef_FullListRef) Reset() {
	*x = ListRef_FullListRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sequence_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRef_FullListRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRef_FullListRef) ProtoMessage() {}

func (x *ListRef_FullListRef) ProtoReflect() protoreflect.Message {
	mi := &file_sequence_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRef_FullListRef.ProtoReflect.Descriptor instead.
func (*ListRef_FullListRef) Descriptor() ([]byte, []int) {
	return file_sequence_proto_rawDescGZIP(), []int{4, 0}
}

var File_sequence_proto protoreflect.FileDescriptor

var file_sequence_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x08, 0x61, 0x70, 0x69, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x1a, 0x0c, 0x6d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x4e, 0x0a, 0x0c, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x66, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x72, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x61, 0x70, 0x69, 0x5f,
	0x73, 0x70, 0x65, 0x63, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x66, 0x52, 0x07, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x66, 0x22, 0x54, 0x0a, 0x0e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x66, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2c, 0x0a,
	0x08, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x66, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x66, 0x22, 0x85, 0x04, 0x0a, 0x0c,
	0x50, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x66, 0x12, 0x31, 0x0a, 0x09,
	0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x08, 0x62, 0x6f, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x34, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x09, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x37, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x70, 0x69,
	0x5f, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65,
	0x48, 0x00, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x34,
	0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x73,
	0x70, 0x65, 0x63, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52,
	0x09, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x54, 0x79, 0x70, 0x65, 0x12, 0x37, 0x0a, 0x0b, 0x75, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x37, 0x0a, 0x0b, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x73,
	0x70, 0x65, 0x63, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00,
	0x52, 0x0a, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x54, 0x79, 0x70, 0x65, 0x12, 0x37, 0x0a, 0x0b,
	0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x44, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x64, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x70, 0x69, 0x5f,
	0x73, 0x70, 0x65, 0x63, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00,
	0x52, 0x09, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x22, 0xa0, 0x01, 0x0a, 0x09, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x65,
	0x66, 0x12, 0x44, 0x0a, 0x0b, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x73, 0x70, 0x65,
	0x63, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x65, 0x66, 0x2e, 0x46, 0x75, 0x6c, 0x6c,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x65, 0x66, 0x48, 0x00, 0x52, 0x0a, 0x66, 0x75, 0x6c,
	0x6c, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x12, 0x35, 0x0a, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x72, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x70, 0x69,
	0x5f, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x66, 0x48, 0x00, 0x52, 0x08, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x65, 0x66, 0x1a, 0x0f,
	0x0a, 0x0d, 0x46, 0x75, 0x6c, 0x6c, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x65, 0x66, 0x42,
	0x05, 0x0a, 0x03, 0x72, 0x65, 0x66, 0x22, 0x94, 0x01, 0x0a, 0x07, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x66, 0x12, 0x3c, 0x0a, 0x09, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x73, 0x70, 0x65, 0x63,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x66, 0x2e, 0x46, 0x75, 0x6c, 0x6c, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x66, 0x48, 0x00, 0x52, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x35, 0x0a, 0x08, 0x65, 0x6c, 0x65, 0x6d, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x66, 0x48, 0x00, 0x52, 0x07,
	0x65, 0x6c, 0x65, 0x6d, 0x52, 0x65, 0x66, 0x1a, 0x0d, 0x0a, 0x0b, 0x46, 0x75, 0x6c, 0x6c, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x66, 0x42, 0x05, 0x0a, 0x03, 0x72, 0x65, 0x66, 0x22, 0xbb, 0x01,
	0x0a, 0x07, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x66, 0x12, 0x3d, 0x0a, 0x0d, 0x70, 0x72, 0x69,
	0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x50, 0x72, 0x69, 0x6d,
	0x69, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x66, 0x48, 0x00, 0x52, 0x0c, 0x70, 0x72, 0x69, 0x6d,
	0x69, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x66, 0x12, 0x34, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61,
	0x70, 0x69, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x65,
	0x66, 0x48, 0x00, 0x52, 0x09, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x65, 0x66, 0x12, 0x2e,
	0x0a, 0x08, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x66, 0x48, 0x00, 0x52, 0x07, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x66, 0x42, 0x0b,
	0x0a, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x22, 0xf2, 0x01, 0x0a, 0x0d,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x66, 0x12, 0x21, 0x0a,
	0x0c, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x31, 0x0a, 0x07, 0x61, 0x72, 0x67, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x4e, 0x61, 0x6d,
	0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x66, 0x48, 0x00, 0x52, 0x06, 0x61, 0x72, 0x67,
	0x52, 0x65, 0x66, 0x12, 0x3b, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f,
	0x72, 0x65, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x5f,
	0x73, 0x70, 0x65, 0x63, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x66, 0x48, 0x00, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x66,
	0x12, 0x47, 0x0a, 0x11, 0x61, 0x6b, 0x69, 0x74, 0x61, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70,
	0x69, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x41, 0x6b, 0x69, 0x74, 0x61, 0x41, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x10, 0x61, 0x6b, 0x69, 0x74, 0x61, 0x41, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x05, 0x0a, 0x03, 0x72, 0x65, 0x66,
	0x22, 0xc2, 0x01, 0x0a, 0x0e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x12, 0x55, 0x0a, 0x0f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x74, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61,
	0x70, 0x69, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x1a, 0x59, 0x0a, 0x13, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x4d, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x3d, 0x0a, 0x0e, 0x65, 0x6c, 0x65, 0x6d, 0x5f, 0x74, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x61, 0x70, 0x69, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x65, 0x6c, 0x65, 0x6d, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x73, 0x22, 0x51, 0x0a, 0x10, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x3d, 0x0a, 0x0e, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x22, 0xec, 0x02, 0x0a, 0x0c, 0x44, 0x61, 0x74, 0x61,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x43, 0x0a, 0x0f, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x3d, 0x0a,
	0x0d, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0c,
	0x6c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x70,
	0x69, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x03, 0x72, 0x65, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x66, 0x48, 0x00, 0x52, 0x03, 0x72, 0x65,
	0x66, 0x12, 0x49, 0x0a, 0x11, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x74, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61,
	0x70, 0x69, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x10, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x04,
	0x6d, 0x65, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x70, 0x69,
	0x5f, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04,
	0x6d, 0x65, 0x74, 0x61, 0x42, 0x10, 0x0a, 0x0e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x74, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x22, 0xba, 0x03, 0x0a, 0x0e, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x09, 0x6d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61,
	0x70, 0x69, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x49, 0x44,
	0x52, 0x08, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x49, 0x64, 0x12, 0x4f, 0x0a, 0x0d, 0x61, 0x72,
	0x67, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x41, 0x72, 0x67, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x61,
	0x72, 0x67, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x12, 0x45, 0x0a, 0x09, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x61, 0x70, 0x69, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x73, 0x12, 0x28, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x1a, 0x57, 0x0a, 0x11,
	0x41, 0x72, 0x67, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4c, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x73,
	0x70, 0x65, 0x63, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x5f, 0x0a, 0x08, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x43, 0x0a, 0x10, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x5f,
	0x73, 0x70, 0x65, 0x63, 0x2e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x52, 0x0f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x73, 0x22, 0x58, 0x0a, 0x0b, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x75, 0x6e, 0x12, 0x24, 0x0a, 0x03, 0x73, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x53, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x03, 0x73, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x72,
	0x75, 0x6e, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x72, 0x65, 0x72, 0x75, 0x6e, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x42, 0x2c,
	0x5a, 0x2a, 0x61, 0x6b, 0x69, 0x74, 0x61, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x75, 0x70, 0x65, 0x72, 0x73, 0x74, 0x61, 0x72, 0x2f, 0x70, 0x62,
	0x2f, 0x67, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sequence_proto_rawDescOnce sync.Once
	file_sequence_proto_rawDescData = file_sequence_proto_rawDesc
)

func file_sequence_proto_rawDescGZIP() []byte {
	file_sequence_proto_rawDescOnce.Do(func() {
		file_sequence_proto_rawDescData = protoimpl.X.CompressGZIP(file_sequence_proto_rawDescData)
	})
	return file_sequence_proto_rawDescData
}

var file_sequence_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_sequence_proto_goTypes = []interface{}{
	(*NamedDataRef)(nil),            // 0: api_spec.NamedDataRef
	(*IndexedDataRef)(nil),          // 1: api_spec.IndexedDataRef
	(*PrimitiveRef)(nil),            // 2: api_spec.PrimitiveRef
	(*StructRef)(nil),               // 3: api_spec.StructRef
	(*ListRef)(nil),                 // 4: api_spec.ListRef
	(*DataRef)(nil),                 // 5: api_spec.DataRef
	(*MethodDataRef)(nil),           // 6: api_spec.MethodDataRef
	(*StructTemplate)(nil),          // 7: api_spec.StructTemplate
	(*ListTemplate)(nil),            // 8: api_spec.ListTemplate
	(*OptionalTemplate)(nil),        // 9: api_spec.OptionalTemplate
	(*DataTemplate)(nil),            // 10: api_spec.DataTemplate
	(*MethodTemplate)(nil),          // 11: api_spec.MethodTemplate
	(*Sequence)(nil),                // 12: api_spec.Sequence
	(*SequenceRun)(nil),             // 13: api_spec.SequenceRun
	(*StructRef_FullStructRef)(nil), // 14: api_spec.StructRef.FullStructRef
	(*ListRef_FullListRef)(nil),     // 15: api_spec.ListRef.FullListRef
	nil,                             // 16: api_spec.StructTemplate.FieldTemplatesEntry
	nil,                             // 17: api_spec.MethodTemplate.ArgTemplatesEntry
	nil,                             // 18: api_spec.MethodTemplate.ResponsesEntry
	(*BoolType)(nil),                // 19: api_spec.BoolType
	(*BytesType)(nil),               // 20: api_spec.BytesType
	(*StringType)(nil),              // 21: api_spec.StringType
	(*Int32Type)(nil),               // 22: api_spec.Int32Type
	(*Int64Type)(nil),               // 23: api_spec.Int64Type
	(*Uint32Type)(nil),              // 24: api_spec.Uint32Type
	(*Uint64Type)(nil),              // 25: api_spec.Uint64Type
	(*DoubleType)(nil),              // 26: api_spec.DoubleType
	(*FloatType)(nil),               // 27: api_spec.FloatType
	(*AkitaAnnotations)(nil),        // 28: api_spec.AkitaAnnotations
	(*Data)(nil),                    // 29: api_spec.Data
	(*DataMeta)(nil),                // 30: api_spec.DataMeta
	(*MethodID)(nil),                // 31: api_spec.MethodID
	(*MethodMeta)(nil),              // 32: api_spec.MethodMeta
}
var file_sequence_proto_depIdxs = []int32{
	5,  // 0: api_spec.NamedDataRef.data_ref:type_name -> api_spec.DataRef
	5,  // 1: api_spec.IndexedDataRef.data_ref:type_name -> api_spec.DataRef
	19, // 2: api_spec.PrimitiveRef.bool_type:type_name -> api_spec.BoolType
	20, // 3: api_spec.PrimitiveRef.bytes_type:type_name -> api_spec.BytesType
	21, // 4: api_spec.PrimitiveRef.string_type:type_name -> api_spec.StringType
	22, // 5: api_spec.PrimitiveRef.int32_type:type_name -> api_spec.Int32Type
	23, // 6: api_spec.PrimitiveRef.int64_type:type_name -> api_spec.Int64Type
	24, // 7: api_spec.PrimitiveRef.uint32_type:type_name -> api_spec.Uint32Type
	25, // 8: api_spec.PrimitiveRef.uint64_type:type_name -> api_spec.Uint64Type
	26, // 9: api_spec.PrimitiveRef.double_type:type_name -> api_spec.DoubleType
	27, // 10: api_spec.PrimitiveRef.float_type:type_name -> api_spec.FloatType
	14, // 11: api_spec.StructRef.full_struct:type_name -> api_spec.StructRef.FullStructRef
	0,  // 12: api_spec.StructRef.field_ref:type_name -> api_spec.NamedDataRef
	15, // 13: api_spec.ListRef.full_list:type_name -> api_spec.ListRef.FullListRef
	1,  // 14: api_spec.ListRef.elem_ref:type_name -> api_spec.IndexedDataRef
	2,  // 15: api_spec.DataRef.primitive_ref:type_name -> api_spec.PrimitiveRef
	3,  // 16: api_spec.DataRef.struct_ref:type_name -> api_spec.StructRef
	4,  // 17: api_spec.DataRef.list_ref:type_name -> api_spec.ListRef
	0,  // 18: api_spec.MethodDataRef.arg_ref:type_name -> api_spec.NamedDataRef
	0,  // 19: api_spec.MethodDataRef.response_ref:type_name -> api_spec.NamedDataRef
	28, // 20: api_spec.MethodDataRef.akita_annotations:type_name -> api_spec.AkitaAnnotations
	16, // 21: api_spec.StructTemplate.field_templates:type_name -> api_spec.StructTemplate.FieldTemplatesEntry
	10, // 22: api_spec.ListTemplate.elem_templates:type_name -> api_spec.DataTemplate
	10, // 23: api_spec.OptionalTemplate.value_template:type_name -> api_spec.DataTemplate
	7,  // 24: api_spec.DataTemplate.struct_template:type_name -> api_spec.StructTemplate
	8,  // 25: api_spec.DataTemplate.list_template:type_name -> api_spec.ListTemplate
	29, // 26: api_spec.DataTemplate.value:type_name -> api_spec.Data
	6,  // 27: api_spec.DataTemplate.ref:type_name -> api_spec.MethodDataRef
	9,  // 28: api_spec.DataTemplate.optional_template:type_name -> api_spec.OptionalTemplate
	30, // 29: api_spec.DataTemplate.meta:type_name -> api_spec.DataMeta
	31, // 30: api_spec.MethodTemplate.method_id:type_name -> api_spec.MethodID
	17, // 31: api_spec.MethodTemplate.arg_templates:type_name -> api_spec.MethodTemplate.ArgTemplatesEntry
	18, // 32: api_spec.MethodTemplate.responses:type_name -> api_spec.MethodTemplate.ResponsesEntry
	32, // 33: api_spec.MethodTemplate.meta:type_name -> api_spec.MethodMeta
	11, // 34: api_spec.Sequence.method_templates:type_name -> api_spec.MethodTemplate
	12, // 35: api_spec.SequenceRun.seq:type_name -> api_spec.Sequence
	10, // 36: api_spec.StructTemplate.FieldTemplatesEntry.value:type_name -> api_spec.DataTemplate
	10, // 37: api_spec.MethodTemplate.ArgTemplatesEntry.value:type_name -> api_spec.DataTemplate
	29, // 38: api_spec.MethodTemplate.ResponsesEntry.value:type_name -> api_spec.Data
	39, // [39:39] is the sub-list for method output_type
	39, // [39:39] is the sub-list for method input_type
	39, // [39:39] is the sub-list for extension type_name
	39, // [39:39] is the sub-list for extension extendee
	0,  // [0:39] is the sub-list for field type_name
}

func init() { file_sequence_proto_init() }
func file_sequence_proto_init() {
	if File_sequence_proto != nil {
		return
	}
	file_method_proto_init()
	file_types_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_sequence_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NamedDataRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sequence_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndexedDataRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sequence_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrimitiveRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sequence_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StructRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sequence_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sequence_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sequence_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MethodDataRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sequence_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StructTemplate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sequence_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTemplate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sequence_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OptionalTemplate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sequence_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataTemplate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sequence_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MethodTemplate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sequence_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sequence); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sequence_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SequenceRun); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sequence_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StructRef_FullStructRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sequence_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRef_FullListRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_sequence_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*PrimitiveRef_BoolType)(nil),
		(*PrimitiveRef_BytesType)(nil),
		(*PrimitiveRef_StringType)(nil),
		(*PrimitiveRef_Int32Type)(nil),
		(*PrimitiveRef_Int64Type)(nil),
		(*PrimitiveRef_Uint32Type)(nil),
		(*PrimitiveRef_Uint64Type)(nil),
		(*PrimitiveRef_DoubleType)(nil),
		(*PrimitiveRef_FloatType)(nil),
	}
	file_sequence_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*StructRef_FullStruct)(nil),
		(*StructRef_FieldRef)(nil),
	}
	file_sequence_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*ListRef_FullList)(nil),
		(*ListRef_ElemRef)(nil),
	}
	file_sequence_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*DataRef_PrimitiveRef)(nil),
		(*DataRef_StructRef)(nil),
		(*DataRef_ListRef)(nil),
	}
	file_sequence_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*MethodDataRef_ArgRef)(nil),
		(*MethodDataRef_ResponseRef)(nil),
	}
	file_sequence_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*DataTemplate_StructTemplate)(nil),
		(*DataTemplate_ListTemplate)(nil),
		(*DataTemplate_Value)(nil),
		(*DataTemplate_Ref)(nil),
		(*DataTemplate_OptionalTemplate)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sequence_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_sequence_proto_goTypes,
		DependencyIndexes: file_sequence_proto_depIdxs,
		MessageInfos:      file_sequence_proto_msgTypes,
	}.Build()
	File_sequence_proto = out.File
	file_sequence_proto_rawDesc = nil
	file_sequence_proto_goTypes = nil
	file_sequence_proto_depIdxs = nil
}
